/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 *
 */

plugins {
    id 'application'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'com.github.spotbugs' version '4.6.0'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
}

description = "Mechanic"
group = "com.openlattice"

ext.projectName = "mechanic"
ext.scmUrl = 'scm:git:https://github.com/openlattice/mechanic.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/mechanic.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/mechanic.git'

apply from: "../gradles/openlattice.gradle"

def MECHANIC_ARGS = "$System.env.MECHANIC_ARGS"
def MECHANIC_XMS = "$System.env.MECHANIC_XMS"
def MECHANIC_XMX = "$System.env.MECHANIC_XMX"
def PARALLEL = "$System.env.PARALLELISM"
def GC = "$System.env.GC"

if (MECHANIC_XMS == 'null' || MECHANIC_XMS == null || MECHANIC_XMS == "") {
    MECHANIC_XMS = '-Xms100g'
}

if (MECHANIC_XMX == 'null' || MECHANIC_XMX == null || MECHANIC_XMX == "") {
    MECHANIC_XMX = '-Xmx200g'
}

if (MECHANIC_ARGS == 'null' || MECHANIC_ARGS == null || MECHANIC_ARGS == "") {
    MECHANIC_ARGS = '--local --postgres'
}

if (PARALLEL == 'null' || PARALLEL == null || PARALLEL == "") {
    PARALLEL = "-Djava.util.concurrent.ForkJoinPool.common.parallelism=" + Runtime.runtime.availableProcessors()
}

if (GC == 'null' || GC == null || GC == "") {
    GC = "-XX:+UseG1GC"
}

mainClassName = "com.openlattice.mechanic.MechanicKt"
applicationDefaultJvmArgs = [MECHANIC_XMS, MECHANIC_XMX, "-server", GC, PARALLEL]
applicationDefaultJvmArgs += [ "--add-modules", "java.base",
                               "--add-modules", "java.se",
                               "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                               "--add-opens","java.base/java.lang=ALL-UNNAMED",
                               "--add-opens","java.base/java.nio=ALL-UNNAMED",
                               "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                               "--add-opens","java.management/sun.management=ALL-UNNAMED",
                               "--add-opens", "jdk.management/com.ibm.lang.management.internal=ALL-UNNAMED",
                               "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

println "Using java args for running ${projectName}: " + Arrays.toString(applicationDefaultJvmArgs)

run {
    if (MECHANIC_ARGS != null) {
        args MECHANIC_ARGS.split();
    } else if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

println "Enabled profiles: " + Arrays.toString(run.args)

configurations {
    provided
}

configurations.all {
    exclude module: 'slf4j-log4j12'
    exclude group: 'asm', module: 'asm'
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

checkstyle {
    toolVersion = '7.4'
    showViolations = false
    config project.resources.text.fromUri(rootProject.file('gradles/checkstyle.xml').toURI())
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}
spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"

    implementation "org.ow2.asm:asm:$asm_version"
    implementation "commons-cli:commons-cli:$commons_cli_version"

    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    compileOnly "com.google.code.findbugs:findbugs:${findbugs_version}"
    if (project.hasProperty('developmentMode') && project.developmentMode) {
        logger.info(project.name + " using project dependencies.")
        implementation project(":rhizome")
        implementation project(":conductor-client")
        implementation project(":courier")
    } else {
        logger.info(project.name + " using jar dependencies.")
        implementation "com.openlattice:courier:$courier_version"
        implementation "com.openlattice:conductor-client:$conductor_client_version"
        implementation "com.openlattice:rhizome:$rhizome_version"
    }

    /*
     * TESTING
     */
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-all:$mockito_version"
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility = JavaVersion.VERSION_11
    ext.targetCompatibility = JavaVersion.VERSION_11
}

eclipse.classpath.plusConfigurations += [configurations.provided]

tasks.withType(JavaCompile) {
    options.compilerArgs+= [ "--add-modules", "java.base",
                             "--add-modules", "java.se",
                             "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED"]
}

tasks.withType(Test) {
    jvmArgs += [ "--add-modules", "java.base",
                 "--add-modules", "java.se",
                 "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                 "--add-opens","java.base/java.lang=ALL-UNNAMED",
                 "--add-opens","java.base/java.nio=ALL-UNNAMED",
                 "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                 "--add-opens","java.management/sun.management=ALL-UNNAMED",
                 "--add-opens", "jdk.management/com.ibm.lang.management.internal=ALL-UNNAMED",
                 "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}
